%% bare_conf.tex
%% V1.4b
%% 2015/08/26
%% by Michael Shell
%% See:
%% http://www.michaelshell.org/
%% for current contact information.
%%
%% This is a skeleton file demonstrating the use of IEEEtran.cls
%% (requires IEEEtran.cls version 1.8b or later) with an IEEE
%% conference paper.
%%
%% Support sites:
%% http://www.michaelshell.org/tex/ieeetran/
%% http://www.ctan.org/pkg/ieeetran
%% and
%% http://www.ieee.org/

%%*************************************************************************
%% Legal Notice:
%% This code is offered as-is without any warranty either expressed or
%% implied; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE! 
%% User assumes all risk.
%% In no event shall the IEEE or any contributor to this code be liable for
%% any damages or losses, including, but not limited to, incidental,
%% consequential, or any other damages, resulting from the use or misuse
%% of any information contained here.
%%
%% All comments are the opinions of their respective authors and are not
%% necessarily endorsed by the IEEE.
%%
%% This work is distributed under the LaTeX Project Public License (LPPL)
%% ( http://www.latex-project.org/ ) version 1.3, and may be freely used,
%% distributed and modified. A copy of the LPPL, version 1.3, is included
%% in the base LaTeX documentation of all distributions of LaTeX released
%% 2003/12/01 or later.
%% Retain all contribution notices and credits.
%% ** Modified files should be clearly indicated as such, including  **
%% ** renaming them and changing author support contact information. **
%%*************************************************************************


% *** Authors should verify (and, if needed, correct) their LaTeX system  ***
% *** with the testflow diagnostic prior to trusting their LaTeX platform ***
% *** with production work. The IEEE's font choices and paper sizes can   ***
% *** trigger bugs that do not appear when using other class files.       ***                          ***
% The testflow support page is at:
% http://www.michaelshell.org/tex/testflow/



\documentclass[conference]{IEEEtran}
% Some Computer Society conferences also require the compsoc mode option,
% but others use the standard conference format.
%
% If IEEEtran.cls has not been installed into the LaTeX system files,
% manually specify the path to it like:
% \documentclass[conference]{../sty/IEEEtran}





% Some very useful LaTeX packages include:
% (uncomment the ones you want to load)


% *** MISC UTILITY PACKAGES ***
%
%\usepackage{ifpdf}
% Heiko Oberdiek's ifpdf.sty is very useful if you need conditional
% compilation based on whether the output is pdf or dvi.
% usage:
% \ifpdf
%   % pdf code
% \else
%   % dvi code
% \fi
% The latest version of ifpdf.sty can be obtained from:
% http://www.ctan.org/pkg/ifpdf
% Also, note that IEEEtran.cls V1.7 and later provides a builtin
% \ifCLASSINFOpdf conditional that works the same way.
% When switching from latex to pdflatex and vice-versa, the compiler may
% have to be run twice to clear warning/error messages.






% *** CITATION PACKAGES ***
%
%\usepackage{cite}
% cite.sty was written by Donald Arseneau
% V1.6 and later of IEEEtran pre-defines the format of the cite.sty package
% \cite{} output to follow that of the IEEE. Loading the cite package will
% result in citation numbers being automatically sorted and properly
% "compressed/ranged". e.g., [1], [9], [2], [7], [5], [6] without using
% cite.sty will become [1], [2], [5]--[7], [9] using cite.sty. cite.sty's
% \cite will automatically add leading space, if needed. Use cite.sty's
% noadjust option (cite.sty V3.8 and later) if you want to turn this off
% such as if a citation ever needs to be enclosed in parenthesis.
% cite.sty is already installed on most LaTeX systems. Be sure and use
% version 5.0 (2009-03-20) and later if using hyperref.sty.
% The latest version can be obtained at:
% http://www.ctan.org/pkg/cite
% The documentation is contained in the cite.sty file itself.






% *** GRAPHICS RELATED PACKAGES ***
%
\ifCLASSINFOpdf
  % \usepackage[pdftex]{graphicx}
  % declare the path(s) where your graphic files are
  % \graphicspath{{../pdf/}{../jpeg/}}
  % and their extensions so you won't have to specify these with
  % every instance of \includegraphics
  % \DeclareGraphicsExtensions{.pdf,.jpeg,.png}
\else
  % or other class option (dvipsone, dvipdf, if not using dvips). graphicx
  % will default to the driver specified in the system graphics.cfg if no
  % driver is specified.
  % \usepackage[dvips]{graphicx}
  % declare the path(s) where your graphic files are
  % \graphicspath{{../eps/}}
  % and their extensions so you won't have to specify these with
  % every instance of \includegraphics
  % \DeclareGraphicsExtensions{.eps}
\fi
% graphicx was written by David Carlisle and Sebastian Rahtz. It is
% required if you want graphics, photos, etc. graphicx.sty is already
% installed on most LaTeX systems. The latest version and documentation
% can be obtained at: 
% http://www.ctan.org/pkg/graphicx
% Another good source of documentation is "Using Imported Graphics in
% LaTeX2e" by Keith Reckdahl which can be found at:
% http://www.ctan.org/pkg/epslatex
%
% latex, and pdflatex in dvi mode, support graphics in encapsulated
% postscript (.eps) format. pdflatex in pdf mode supports graphics
% in .pdf, .jpeg, .png and .mps (metapost) formats. Users should ensure
% that all non-photo figures use a vector format (.eps, .pdf, .mps) and
% not a bitmapped formats (.jpeg, .png). The IEEE frowns on bitmapped formats
% which can result in "jaggedy"/blurry rendering of lines and letters as
% well as large increases in file sizes.
%
% You can find documentation about the pdfTeX application at:
% http://www.tug.org/applications/pdftex





% *** MATH PACKAGES ***
%
%\usepackage{amsmath}
% A popular package from the American Mathematical Society that provides
% many useful and powerful commands for dealing with mathematics.
%
% Note that the amsmath package sets \interdisplaylinepenalty to 10000
% thus preventing page breaks from occurring within multiline equations. Use:
%\interdisplaylinepenalty=2500
% after loading amsmath to restore such page breaks as IEEEtran.cls normally
% does. amsmath.sty is already installed on most LaTeX systems. The latest
% version and documentation can be obtained at:
% http://www.ctan.org/pkg/amsmath





% *** SPECIALIZED LIST PACKAGES ***
%
%\usepackage{algorithmic}
% algorithmic.sty was written by Peter Williams and Rogerio Brito.
% This package provides an algorithmic environment fo describing algorithms.
% You can use the algorithmic environment in-text or within a figure
% environment to provide for a floating algorithm. Do NOT use the algorithm
% floating environment provided by algorithm.sty (by the same authors) or
% algorithm2e.sty (by Christophe Fiorio) as the IEEE does not use dedicated
% algorithm float types and packages that provide these will not provide
% correct IEEE style captions. The latest version and documentation of
% algorithmic.sty can be obtained at:
% http://www.ctan.org/pkg/algorithms
% Also of interest may be the (relatively newer and more customizable)
% algorithmicx.sty package by Szasz Janos:
% http://www.ctan.org/pkg/algorithmicx




% *** ALIGNMENT PACKAGES ***
%
%\usepackage{array}
% Frank Mittelbach's and David Carlisle's array.sty patches and improves
% the standard LaTeX2e array and tabular environments to provide better
% appearance and additional user controls. As the default LaTeX2e table
% generation code is lacking to the point of almost being broken with
% respect to the quality of the end results, all users are strongly
% advised to use an enhanced (at the very least that provided by array.sty)
% set of table tools. array.sty is already installed on most systems. The
% latest version and documentation can be obtained at:
% http://www.ctan.org/pkg/array


% IEEEtran contains the IEEEeqnarray family of commands that can be used to
% generate multiline equations as well as matrices, tables, etc., of high
% quality.




% *** SUBFIGURE PACKAGES ***
%\ifCLASSOPTIONcompsoc
%  \usepackage[caption=false,font=normalsize,labelfont=sf,textfont=sf]{subfig}
%\else
%  \usepackage[caption=false,font=footnotesize]{subfig}
%\fi
% subfig.sty, written by Steven Douglas Cochran, is the modern replacement
% for subfigure.sty, the latter of which is no longer maintained and is
% incompatible with some LaTeX packages including fixltx2e. However,
% subfig.sty requires and automatically loads Axel Sommerfeldt's caption.sty
% which will override IEEEtran.cls' handling of captions and this will result
% in non-IEEE style figure/table captions. To prevent this problem, be sure
% and invoke subfig.sty's "caption=false" package option (available since
% subfig.sty version 1.3, 2005/06/28) as this is will preserve IEEEtran.cls
% handling of captions.
% Note that the Computer Society format requires a larger sans serif font
% than the serif footnote size font used in traditional IEEE formatting
% and thus the need to invoke different subfig.sty package options depending
% on whether compsoc mode has been enabled.
%
% The latest version and documentation of subfig.sty can be obtained at:
% http://www.ctan.org/pkg/subfig




% *** FLOAT PACKAGES ***
%
%\usepackage{fixltx2e}
% fixltx2e, the successor to the earlier fix2col.sty, was written by
% Frank Mittelbach and David Carlisle. This package corrects a few problems
% in the LaTeX2e kernel, the most notable of which is that in current
% LaTeX2e releases, the ordering of single and double column floats is not
% guaranteed to be preserved. Thus, an unpatched LaTeX2e can allow a
% single column figure to be placed prior to an earlier double column
% figure.
% Be aware that LaTeX2e kernels dated 2015 and later have fixltx2e.sty's
% corrections already built into the system in which case a warning will
% be issued if an attempt is made to load fixltx2e.sty as it is no longer
% needed.
% The latest version and documentation can be found at:
% http://www.ctan.org/pkg/fixltx2e


%\usepackage{stfloats}
% stfloats.sty was written by Sigitas Tolusis. This package gives LaTeX2e
% the ability to do double column floats at the bottom of the page as well
% as the top. (e.g., "\begin{figure*}[!b]" is not normally possible in
% LaTeX2e). It also provides a command:
%\fnbelowfloat
% to enable the placement of footnotes below bottom floats (the standard
% LaTeX2e kernel puts them above bottom floats). This is an invasive package
% which rewrites many portions of the LaTeX2e float routines. It may not work
% with other packages that modify the LaTeX2e float routines. The latest
% version and documentation can be obtained at:
% http://www.ctan.org/pkg/stfloats
% Do not use the stfloats baselinefloat ability as the IEEE does not allow
% \baselineskip to stretch. Authors submitting work to the IEEE should note
% that the IEEE rarely uses double column equations and that authors should try
% to avoid such use. Do not be tempted to use the cuted.sty or midfloat.sty
% packages (also by Sigitas Tolusis) as the IEEE does not format its papers in
% such ways.
% Do not attempt to use stfloats with fixltx2e as they are incompatible.
% Instead, use Morten Hogholm'a dblfloatfix which combines the features
% of both fixltx2e and stfloats:
%
% \usepackage{dblfloatfix}
% The latest version can be found at:
% http://www.ctan.org/pkg/dblfloatfix




% *** PDF, URL AND HYPERLINK PACKAGES ***
%
%\usepackage{url}
% url.sty was written by Donald Arseneau. It provides better support for
% handling and breaking URLs. url.sty is already installed on most LaTeX
% systems. The latest version and documentation can be obtained at:
% http://www.ctan.org/pkg/url
% Basically, \url{my_url_here}.




% *** Do not adjust lengths that control margins, column widths, etc. ***
% *** Do not use packages that alter fonts (such as pslatex).         ***
% There should be no need to do such things with IEEEtran.cls V1.6 and later.
% (Unless specifically asked to do so by the journal or conference you plan
% to submit to, of course. )


% correct bad hyphenation here
\hyphenation{op-tical net-works semi-conduc-tor}


\begin{document}
%
% paper title
% Titles are generally capitalized except for words such as a, an, and, as,
% at, but, by, for, in, nor, of, on, or, the, to and up, which are usually
% not capitalized unless they are the first or last word of the title.
% Linebreaks \\ can be used within to get better formatting as desired.
% Do not put math or special symbols in the title.
\title{Mid-Semester Report\\ for Team 16 Project}


% author names and affiliations
% use a multiple column layout for up to three different
% affiliations
\author{\IEEEauthorblockN{Cassidy Crouse (1),
Candace Campbell (2),
Matthew Ferry (3), and 
Chidi Ede (4)}
\IEEEauthorblockA{Department of Computer Science and Electrical Engineering\\
University of Maryland, Baltimore County\\Email: (1) pm26690@umbc.edu, (2) candcam1@umbc.edu,\\
(3) mferry1@umbc.edu, and (4) chidede1@umbc.edu}}

% conference papers do not typically use \thanks and this command
% is locked out in conference mode. If really needed, such as for
% the acknowledgment of grants, issue a \IEEEoverridecommandlockouts
% after \documentclass

% for over three affiliations, or if they all won't fit within the width
% of the page, use this alternative format:
% 
%\author{\IEEEauthorblockN{Michael Shell\IEEEauthorrefmark{1},
%Homer Simpson\IEEEauthorrefmark{2},
%James Kirk\IEEEauthorrefmark{3}, 
%Montgomery Scott\IEEEauthorrefmark{3} and
%Eldon Tyrell\IEEEauthorrefmark{4}}
%\IEEEauthorblockA{\IEEEauthorrefmark{1}School of Electrical and Computer Engineering\\
%Georgia Institute of Technology,
%Atlanta, Georgia 30332--0250\\ Email: see http://www.michaelshell.org/contact.html}
%\IEEEauthorblockA{\IEEEauthorrefmark{2}Twentieth Century Fox, Springfield, USA\\
%Email: homer@thesimpsons.com}
%\IEEEauthorblockA{\IEEEauthorrefmark{3}Starfleet Academy, San Francisco, California 96678-2391\\
%Telephone: (800) 555--1212, Fax: (888) 555--1212}
%\IEEEauthorblockA{\IEEEauthorrefmark{4}Tyrell Inc., 123 Replicant Street, Los Angeles, California 90210--4321}}




% use for special paper notices
%\IEEEspecialpapernotice{(Invited Paper)}




% make the title area
\maketitle

% As a general rule, do not put math, special symbols or citations
% in the abstract
\begin{abstract}
After further research into solving Connect Four using a minimax algorithm, there are several options and optimizations available for varying degrees of precision in our AIs decision making process. It will be shown that applying minimax to any given Connect Four board requires a node traversal that grows exponentially with respect to the iteration depth of the future game state. With this in mind, it will also be shown that for any generally unoptimized AI that would like to solve Connect Four with minimax, there are far too many computations that must be done in order to generate a look-up table that could be used to play a perfect game of Connect Four from the beginning to end in a reasonable amount of time.
\end{abstract}

% no keywords




% For peer review papers, you can put extra information on the cover
% page as needed:
% \ifCLASSOPTIONpeerreview
% \begin{center} \bfseries EDICS Category: 3-BBND \end{center}
% \fi
%
% For peerreview papers, this IEEEtran command inserts a page break and
% creates the second title. It will be ignored for other modes.
\IEEEpeerreviewmaketitle


\section{Findings on the Nature of Connect Four}
% no \IEEEPARstart
The specifics of Connect Four were given in our first report, but we would
like to describe the game more in terms of game theory. The existence of a
perfect solution given a certain game state (an empty board) will also be
explored as well as approximations into the number of possible game states
and other interesting statistics. We have also included more formal definitions
of the algorithms and structures that we may use in the implementation of
a Connect Four solver.


\subsection{Connect Four and Game Theory}
Connect Four is a game in which two players alternate in placing disks in one of seven columns
of a game board that is seven columns wide by six rows high in such a way that they are able
to line up four consecutive disks either horizontally, vertically, or diagonally. A column with
six disks inside of it is a full column, and players cannot place their disks in such a column.
Players must place a disk when it is their turn unless the game board is full. If the game board
is full and no player has lined up four disks consecutively in any winning configuration, the game
is a draw. 

Because their is no apparent score, and any given player either wins, loses, or draws Connect Four 
is a fully-competitive game \cite{IEEEhowto:gametheory}. 
As the decisions of both players are visible to each other
it is also said that Connect Four is a game of perfect information \cite{IEEEhowto:gametheory}.
With both of these qualities in mind, Connect Four is a zero-sum game because any one players 
"score" is the opposite of their opponent's \cite{IEEEhowto:gametheory}.
For example, if the "score" was how many turns it would take you to achieve four
consecutive disks given the other player played a perfect game, then their score would be the
negative of your score.

Because it is a zero-sum game with many possible permutations of game states, we have chosen to
apply a, more or less, brute force minimax algorithm to solving Connect Four from a given game
state onwards. This algorithm would look ahead as far as possible into the moves that could be
made by both players, and choose the one that maximizes the "score" of the AI player, thus
minimizing the "score" of the other player. 

In order to maximize a "score", there must be some
notion of what this "score" actually is, we have not yet decided a way to measure this score
but the value itself is certainly related to how many turns it would take the AI to force a win
(if the other player plays perfectly) and the total number of turns that have already passed.
If the AI finds that its maximum "score" for all possible moves is zero then it has found that if the other player also plays perfectly then it is guaranteed to fill the board and draw.
If any given move could not possibly lead to a win if the other player plays perfectly, the 
"score" is then negative and the AI is likely to lose. Choosing to maximize a negative score will 
ensure that the AI loses in as many turns as possible.


\subsection{A Perfect Solution}
If the Connect Four game board is empty and you are the first player, victory is always possible. 
In other words, if the first player makes the right decision on every turn of play from
beginning to end, they are capable of winning the game every single time regardless
of the decisions of the second player. The most interesting subset of these winning
games is that in which the second player also plays a perfect game (which is to say 
again, that they make all the right decisions on every turn), and loses on the 
second to last (41st) turn of play \cite{IEEEhowto:youtube}. These perfect games end in such a way 
that there is only one column left for both players to play their disks inside of, and every instance includes a forced loss by player two as they must give player one the win.


\subsection{Computing the Perfect Solution}
Our chosen algorithm, minimax, is entirely capable of producing a perfect solution for the
first player at every turn of play given we allow it to run for as long as it requires. The
problem with this is that it will require a length of time that is unreasonable for our
purposes. The total number of valid Connect Four game permutations is over 4.5 trillion
\cite{IEEEhowto:youtube} for a game where the first player has yet to make their first
move. Our minimax algorithm would have to sift through all possible permutations
in order to come to the conclusion that it can win a perfect game on the second to last turn
assuming that the second player will also play a perfect game, as our minimax will. 

This implementation of a brute force minimax is not ideal and we have decided to optimize it in
any way that we can. Although we have yet to implement minimax in our vision, the most obvious
way to optimize the traversal of all of the possible permutations is to use an Alpha-beta method
of trimming off depth iterations that are either unrealistic or inherently flawed. If the AI is
aware, as it should be, that it will be guaranteed to be able to win if it is the first player
and move has yet been made then it should be able to ignore permutations where victory is impossible or defeat is certain unless it finds that victory is in fact impossible or defeat is in fact certain. 

There are also
other important pieces of information such as the fact that a perfect game (a game where both
players make all of the most ideal decisions when it is their turn) can only be played if the 
first player makes their first move in the middle column of the board \cite{IEEEhowto:youtube}. 
This fact alone trims the number of possible permutations roughly by a factor of seven. Our
overall goal for this Connect Four AI will be that if we pit two versions of it against each
other, it should play a perfect game that ends with the first player winning on the second to
last turn on as many instances as possible. In our case, we may have to trade precision for
computation time by either reducing the lookahead depth of our minimax tree structure or
developing some other optimization or set of optimizations to the minimax algorithm.

% An example of a floating figure using the graphicx package.
% Note that \label must occur AFTER (or within) \caption.
% For figures, \caption should occur after the \includegraphics.
% Note that IEEEtran v1.7 and later has special internal code that
% is designed to preserve the operation of \label within \caption
% even when the captionsoff option is in effect. However, because
% of issues like this, it may be the safest practice to put all your
% \label just after \caption rather than within \caption{}.
%
% Reminder: the "draftcls" or "draftclsnofoot", not "draft", class
% option should be used if it is desired that the figures are to be
% displayed while in draft mode.
%
%\begin{figure}[!t]
%\centering
%\includegraphics[width=2.5in]{myfigure}
% where an .eps filename suffix will be assumed under latex, 
% and a .pdf suffix will be assumed for pdflatex; or what has been declared
% via \DeclareGraphicsExtensions.
%\caption{Simulation results for the network.}
%\label{fig_sim}
%\end{figure}

% Note that the IEEE typically puts floats only at the top, even when this
% results in a large percentage of a column being occupied by floats.


% An example of a double column floating figure using two subfigures.
% (The subfig.sty package must be loaded for this to work.)
% The subfigure \label commands are set within each subfloat command,
% and the \label for the overall figure must come after \caption.
% \hfil is used as a separator to get equal spacing.
% Watch out that the combined width of all the subfigures on a 
% line do not exceed the text width or a line break will occur.
%
%\begin{figure*}[!t]
%\centering
%\subfloat[Case I]{\includegraphics[width=2.5in]{box}%
%\label{fig_first_case}}
%\hfil
%\subfloat[Case II]{\includegraphics[width=2.5in]{box}%
%\label{fig_second_case}}
%\caption{Simulation results for the network.}
%\label{fig_sim}
%\end{figure*}
%
% Note that often IEEE papers with subfigures do not employ subfigure
% captions (using the optional argument to \subfloat[]), but instead will
% reference/describe all of them (a), (b), etc., within the main caption.
% Be aware that for subfig.sty to generate the (a), (b), etc., subfigure
% labels, the optional argument to \subfloat must be present. If a
% subcaption is not desired, just leave its contents blank,
% e.g., \subfloat[].


% An example of a floating table. Note that, for IEEE style tables, the
% \caption command should come BEFORE the table and, given that table
% captions serve much like titles, are usually capitalized except for words
% such as a, an, and, as, at, but, by, for, in, nor, of, on, or, the, to
% and up, which are usually not capitalized unless they are the first or
% last word of the caption. Table text will default to \footnotesize as
% the IEEE normally uses this smaller font for tables.
% The \label must come after \caption as always.
%
%\begin{table}[!t]
%% increase table row spacing, adjust to taste
%\renewcommand{\arraystretch}{1.3}
% if using array.sty, it might be a good idea to tweak the value of
% \extrarowheight as needed to properly center the text within the cells
%\caption{An Example of a Table}
%\label{table_example}
%\centering
%% Some packages, such as MDW tools, offer better commands for making tables
%% than the plain LaTeX2e tabular which is used here.
%\begin{tabular}{|c||c|}
%\hline
%One & Two\\
%\hline
%Three & Four\\
%\hline
%\end{tabular}
%\end{table}


% Note that the IEEE does not put floats in the very first column
% - or typically anywhere on the first page for that matter. Also,
% in-text middle ("here") positioning is typically not used, but it
% is allowed and encouraged for Computer Society conferences (but
% not Computer Society journals). Most IEEE journals/conferences use
% top floats exclusively. 
% Note that, LaTeX2e, unlike IEEE journals/conferences, places
% footnotes above bottom floats. This can be corrected via the
% \fnbelowfloat command of the stfloats package.

\section{Proposed Implementation and Preliminary Results}


\subsection{Structure of a Connect Four Game Permutation}

As per the rules of Connect Four, at any given point in time a player has the choice of placing
a disk in one of up to seven valid columns. At the beginning of the game, all seven columns are
available, and the total number of possible game permutations is at its maximum of 4.5 trillion.
Upon deciding one of the seven columns, the game has advanced to the depth below, cutting the
number of permutations by a factor of roughly seven. As columns can eventually be filled,
and not all placements of disks are valid as the game ends when four disks are lined up
consecutively in a winning configuration, the game of Connect Four can be thought of as a
multiway tree \cite{IEEEhowto:multiwaytree}
of height 42, with all of the leaves (the bottom nodes of the tree) representing
either a victory, loss, or draw in the case of the very bottom leaves at depth 42. Although
the game of Connect Four is a multiway tree, the number of leaves at a particular child node
is between zero and seven.

\textit{maybe include an image of multiway tree here}

Minimax must traverse this structure of Connect Four in such a way that it would return to the
AI either the certainty of a perfect move, or at the least it's best approximation up to a certain
depth. Although we know that the true number of permutations is just over 4.5 trillion, it is
possible to think of Connect Four as being bounded by $ 7^n $ where $ n \leq 42 $ is the
number of turns that have passed.
For example, up to the sixth turn of play no columns may be full and no wins are
possible, so the number of permutations is bounded by $ 7 x 7 ... x 7 = 7^6 = 117,649 $
where the true number of permutations is 22100 according to Numberphile \cite{IEEEhowto:youtube}. 
This is calculated assuming that at every turn up to seven columns can possibly be chosen, and the 
next turn up to  seven more can be chosen, and so on. 
An implementation of minimax with an exponential upperbound of
$ O(n) = 7^n $ is not ideal or even computationally possible at a depth of 42, nor is it practical
when examining the true upperbound of 4.5 trillion computed permutations.


\subsection{More on Minimax and Alpha-Beta}

\textit{Explain the history of minimax and alpha-beta, perhaps discuss the nature of zero-sum games and mention a formal definition of minimax according to a formal source. Possibly the same 
for Alpha-Beta.}

The minimax algorithm is designed to find the optimal strategy for the first player, and to decide 
the best (first) move. According to the authors of \emph{Artificial Intelligence: a Modern 
Approach} a formal five step application of minimax does the following 
\cite{IEEEhowto:modernapproach}:

\begin{itemize}

\item Generate the whole game tree all the way down to the terminal states

\item Apply the utility function to all of the terminal states to get its value

\item Use the utlity of all of the terminal states to determine the utility of the nodes one
level higher. The utility of nodes not belonging to the first player is generated assuming that
the second player will make the right move.

\item Continue backing up utility values for the leaf nodes towards the root one layer at a time.

\item Eventually the valeus have reached the root, and player one will choose the value that has
the greatest utility.

\end{itemize}

Our implementation of this may include the use of the multiway tree discussed in the last section,
and a recursive traversal of the leaf nodes. Where computation limits the effectiveness of our
algorithm, the depth of the traversal may be altered to decrease the amount of computations
required while still giving an approximation of the next best move \cite{IEEEhowto:minimax}.

\subsection{Progress Thus Far}

\textit{Mention the UI, mention the tree structure maybe include a picture, maybe include forward
declarations of what our functions will be (without code so just inputs, outputs, and what they
do).}

% conference papers do not normally have an appendix

% use section* for acknowledgment
\section{Conclusion}

\textit{Sum up all of the sections, restate the goal of the Connect Four solver}

% trigger a \newpage just before the given reference
% number - used to balance the columns on the last page
% adjust value as needed - may need to be readjusted if
% the document is modified later
%\IEEEtriggeratref{8}
% The "triggered" command can be changed if desired:
%\IEEEtriggercmd{\enlargethispage{-5in}}

% references section

% can use a bibliography generated by BibTeX as a .bbl file
% BibTeX documentation can be easily obtained at:
% http://mirror.ctan.org/biblio/bibtex/contrib/doc/
% The IEEEtran BibTeX style support page is at:
% http://www.michaelshell.org/tex/ieeetran/bibtex/
%\bibliographystyle{IEEEtran}
% argument is your BibTeX string definitions and bibliography database(s)
%\bibliography{IEEEabrv,../bib/paper}
%
% <OR> manually copy in the resultant .bbl file
% set second argument of \begin to the number of references
% (used to reserve space for the reference number labels box)
\begin{thebibliography}{1}

% not a correct MLA citation

\bibitem{IEEEhowto:youtube}
https://www.youtube.com/watch?v=yDWPi1pZ0Po

% correct MLA citation

\bibitem{IEEEhowto:gametheory}
Resnik, Michael D. “GAME THEORY.” \emph{Choices: An Introduction to Decision Theory}, NED - New edition ed., University of Minnesota Press, 1987, pp. 121–176. \emph{JSTOR}, www.jstor.org/stable/10.5749/j.ctttshgd.9.

% correct MLA citation

\bibitem{IEEEhowto:multiwaytree}
Black, Paul E. "multiway tree", \emph{Dictionary of Algorithms and Data Structures}, Vreda Pieterse and Paul E. Black, eds. 27 October 2005, xlinux.nist.gov/dads/HTML/multiwaytree.html.

% correct MLA citation

\bibitem{IEEEhowto:minimax}
Rajiv Bakulesh Shah, "minimax", \emph{Dictionary of Algorithms and Data Structures}, Vreda Pieterse and Paul E. Black, eds. 10 January 2007, xlinux.nist.gov/dads/HTML/minimax.html.

% correct MLA citation, link: https://www.cin.ufpe.br/~tfl2/artificial-intelligence-modern-approach.9780131038059.25368.pdfa

\bibitem{IEEEhowto:modernapproach}
Russell, Stuart J., and Peter Norvig. \emph{Artificial intelligence : a modern approach}. Englewood Cliffs, N.J: Prentice Hall, 1995. Print.

% example of the format of a citation, I kept it for now as a reference

\bibitem{IEEEhowto:kopka}
H.~Kopka and P.~W. Daly, \emph{A Guide to \LaTeX}, 3rd~ed.\hskip 1em plus
  0.5em minus 0.4em\relax Harlow, England: Addison-Wesley, 1999.

\end{thebibliography}


\section*{Reference Reviews}


\subsection*{Numberphile}

Although an informal source, the calculations provided by the youtube video posted under the
name "Connect Four - Numberphile" are instrumental in providing insight into the number of 
possible permutations that would be explored by minimax at the beginning of any given game. 
As the total number of valid permutations is computed by making every possible move at every
possible turn, it is essentially an application of minimax on the first turn of play and
represents the total number of iterations of the depth tree. The concept
of a perfect game in which both players make ideal moves and end with the first player's victory
on the 41st turn of play also provides some optimum goal for our AI to achieve (whether or not
we are able to do so).


\subsection*{Choices: An Introduction to Decision Theory}

A more formal source that explores all manner of two-person competitive and non-competetive games
and provides proofs for the completeness of a (mixed strategy) solution for a two-person competitive zero-sum game such as tic-tac-toe. 
Used to provide a formal definition of Connect Four as a fully-competitive
zero-sum game in which the ideal utility function of the first player on their turn results in
the negative ideal of the same utility function of the second player on their turn. The author
also provides a formal definition of the minimax theorem with respect to the utility matrix of
a given game.


\subsection*{Multiway Tree}

A standard definition of a multiway tree structure that may be followed by our minimax algorithm,
the tree would be traversed with a depth-first recursive search. The root of the tree represents
the maximum score for a given player, the children of this node (bounded by 0-7) represent the
possible moves for the given player on the next turn, the children of these nodes (bounded by 0-49 
total children for all previous nodes) represent the moves of the opposite player.


\subsection*{Minimax}

A standard definition of a minimax algorithm that may be used by our Connect Four solver, the
minimax algorithm would perform a recursive traversal of our multiway tree that stores the game
state of all possible upcoming moves. The minimax implementation will assume all moves made are
perfect, and calculate its maximum score for the given player at the given depth based on this
fact.


\subsection*{Artificial Intelligence: A Modern Approach}

Although somewhat dated in its calculation of the amount of time it would take for algorithms such 
as minimax and alpha-beta to complete down to their terminal states, the authors still provide 
relevant definitions and examples of the algorithms in action. 
A figure very similar to our application of minimax to the problem of Connect Four is
presented for the similar game, Tic-Tac-Toe. This figure demonstrates the terminal states with
utility values, and also the backwards recursion to the root node ultimately deciding MAX's
game decision.


% that's all folks
\end{document}
